###############################
#        SETTINGS MENU        #
###############################



screen = <profile> STYLE [SHADING_MENU] [COLORS_AND_LIGHTING_MENU] [POST_PROCESSING_MENU] [GAMEPLAY_EFFECTS_MENU] [WAVING_MENU] [WATER_MENU] [SKY_MENU] [ISOMETRIC_MENU] [PERFORMANCE_MENU] [DEBUG_MENU]
	
	screen.SHADING_MENU = SHADOWS_ENABLED SHADOWS_BRIGHTNESS shadowMapResolution shadowDistance SHADOW_DISTORT_ADDITION SHADOW_FILTERING SHADOWS_NOISE PIXELATED_SHADOWS EXCLUDE_FOLIAGE [CEL_SHADING_MENU] VANILLA_AO_BRIGHT VANILLA_AO_DARK SIDE_SHADING_BRIGHT SIDE_SHADING_DARK BRIGHT_BLOCK_DECREASE NIGHT_SATURATION_DECREASE WEATHER_BRIGHTNESS_MULT [SSAO_MENU]
		
		screen.CEL_SHADING_MENU = SUNLIGHT_CEL_AMOUNT AMBIENT_CEL_AMOUNT BLOCKLIGHT_CEL_AMOUNT
		
	screen.COLORS_AND_LIGHTING_MENU = [DAY_LIGHTING_MENU] [NIGHT_LIGHTING_MENU] [SUNRISE_LIGHTING_MENU] [SUNSET_LIGHTING_MENU] [BLOCKLIGHT_LIGHTING_MENU] [CAVE_LIGHTING_MENU] [SKY_COLORS_MENU] [CLOUD_COLORS_MENU] [HANDHELD_LIGHT_MENU] [NETHER_LIGHTING_MENU] [END_LIGHTING_MENU] [WATER_COLOR_MENU] [IN_LIQUID_FOG_MENU] NIGHT_SATURATION_DECREASE NIGHT_VISION_BRIGHTNESS NIGHT_VISION_GREEN_AMOUNT TEXTURE_CONTRAST FOLIAGE_SATURATION
		
		screen.DAY_LIGHTING_MENU = SKYLIGHT_DAY_RED SKYLIGHT_DAY_GREEN SKYLIGHT_DAY_BLUE SKYLIGHT_DAY_BRIGHTNESS AMBIENT_DAY_RED AMBIENT_DAY_GREEN AMBIENT_DAY_BLUE AMBIENT_DAY_BRIGHTNESS
		
		screen.NIGHT_LIGHTING_MENU = SKYLIGHT_NIGHT_RED SKYLIGHT_NIGHT_GREEN SKYLIGHT_NIGHT_BLUE SKYLIGHT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_RED AMBIENT_NIGHT_GREEN AMBIENT_NIGHT_BLUE AMBIENT_NIGHT_BRIGHTNESS
		
		screen.SUNRISE_LIGHTING_MENU = SKYLIGHT_SUNRISE_RED SKYLIGHT_SUNRISE_GREEN SKYLIGHT_SUNRISE_BLUE SKYLIGHT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_RED AMBIENT_SUNRISE_GREEN AMBIENT_SUNRISE_BLUE AMBIENT_SUNRISE_BRIGHTNESS
		
		screen.SUNSET_LIGHTING_MENU = SKYLIGHT_SUNSET_RED SKYLIGHT_SUNSET_GREEN SKYLIGHT_SUNSET_BLUE SKYLIGHT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_RED AMBIENT_SUNSET_GREEN AMBIENT_SUNSET_BLUE AMBIENT_SUNSET_BRIGHTNESS
		
		screen.BLOCKLIGHT_LIGHTING_MENU = BLOCK_RED BLOCK_GREEN BLOCK_BLUE BLOCK_BRIGHTNESS BLOCK_BRIGHTNESS_CURVE BLOCK_BRIGHTNESS_NIGHT_MULT BLOCKLIGHT_FLICKERING_ENABLED BLOCKLIGHT_FLICKERING_AMOUNT
		
		screen.CAVE_LIGHTING_MENU = CAVE_AMBIENT_RED CAVE_AMBIENT_GREEN CAVE_AMBIENT_BLUE CAVE_AMBIENT_BRIGHTNESS
		
		screen.NETHER_LIGHTING_MENU = NETHER_AMBIENT_RED NETHER_AMBIENT_GREEN NETHER_AMBIENT_BLUE NETHER_AMBIENT_BRIGHTNESS NETHER_BLOCKLIGHT_RED_MULT NETHER_BLOCKLIGHT_GREEN_MULT NETHER_BLOCKLIGHT_BLUE_MULT NETHER_BLOCKLIGHT_BRIGHTNESS_MULT
		
		screen.END_LIGHTING_MENU = END_SKYLIGHT_RED END_SKYLIGHT_GREEN END_SKYLIGHT_BLUE END_SKYLIGHT_BRIGHTNESS END_AMBIENT_RED END_AMBIENT_GREEN END_AMBIENT_BLUE END_AMBIENT_BRIGHTNESS
		
		screen.HANDHELD_LIGHT_MENU = HANDHELD_LIGHT_ENABLED HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS
	
	screen.POST_PROCESSING_MENU = TEMPORAL_FILTER_ENABLED TAA_ENABLED FXAA_ENABLED [FOG_MENU] [BLOOM_MENU] [SSAO_MENU] [REFLECTION_MENU] [SUNRAYS_MENU] [DOF_MENU] [MOTION_BLUR_MENU] [SHARPENING_MENU] [COLOR_PROCESSING_MENU] [VIGNETTE_MENU] [HSV_POSTERIZE_MENU] OUTLINES_ENABLED
		
		screen.BLOOM_MENU = BLOOM_ENABLED BLOOM_QUALITY BLOOM_AMOUNT BLOOM_NETHER_AMOUNT BLOOM_END_AMOUNT BLOOM_SIZE BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF
		
		screen.SSAO_MENU = SSAO_ENABLED AO_AMOUNT AO_SIZE AO_QUALITY
		
		screen.REFLECTION_MENU = REFLECTIONS_ENABLED REFLECTION_ITERATIONS REFLECTION_DITHER_AMOUNT REFLECTION_FRESNEL <empty> <empty> <empty> BLOCK_REFLECTION_AMOUNT_SURFACE BLOCK_REFLECTION_AMOUNT_UNDERGROUND WATER_REFLECTION_AMOUNT_SURFACE WATER_REFLECTION_AMOUNT_UNDERGROUND RAIN_REFLECTION_AMOUNT RAIN_REFLECTION_COVERAGE RAIN_REFLECTION_MIN RAIN_REFLECTION_SLOPE
		screen.REFLECTION_MENU.columns = 3
		
		screen.SUNRAYS_MENU = DEPTH_SUNRAYS_ENABLED VOL_SUNRAYS_ENABLED [DEPTH_SUNRAYS_MENU] [VOL_SUNRAYS_MENU] SUNRAYS_QUALITY SUNRAYS_WEATHER_MULT SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_INCREASE_SUNRISE SUNRAYS_INCREASE_SUNSET SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE
			
			screen.DEPTH_SUNRAYS_MENU = DEPTH_SUNRAYS_STYLE SUNRAYS_FLICKERING_FIX
			
			screen.VOL_SUNRAYS_MENU = SUNRAYS_MIN_SURFACE SUNRAYS_MIN_UNDERGROUND SUNRAYS_AMOUNT_MAX_DAY SUNRAYS_AMOUNT_MAX_NIGHT SUNRAYS_BRIGHTNESS_INCREASE
		
		screen.DOF_MENU = DOF_ENABLED DOF_SLOPE_TYPE DOF_NEAR_BLUR_START DOF_FAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_FAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_FAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_SIZE DOF_LOCKED_FOCAL_PLANE DOF_FOCAL_PLANE_DISTANCE
		
		screen.MOTION_BLUR_MENU = MOTION_BLUR_ENABLED MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY
		
		screen.SHARPENING_MENU = SHARPENING_ENABLED SHARPEN_AMOUNT SHARPEN_VEL_ADDITION SHARPEN_DEPTH_ADDITION SHARPENING_DETECT_SIZE
		
		screen.COLOR_PROCESSING_MENU = [COLORS_AND_LIGHTING_MENU] USE_GAMMA_CORRECTION GAMMA BRIGHTNESS AUTO_EXPOSURE_ENABLED AUTO_EXPOSURE_BRIGHT_MULT AUTO_EXPOSURE_DARK_MULT VIBRANCE SATURATION SATURATION_DARK SATURATION_LIGHT CONTRAST TONEMAPPER [COLORBLIND_CORRECTION]
			
			screen.COLORBLIND_CORRECTION = COLORBLIND_MODE COLORBLIND_INTENSITY
		
		screen.VIGNETTE_MENU = VIGNETTE_ENABLED VIGNETTE_SCALE VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_NOISE_ENABLED
		
		screen.HSV_POSTERIZE_MENU = HSV_POSTERIZE_ENABLED HSV_POSTERIZE_HUE_QUALITY HSV_POSTERIZE_SATURATION_QUALITY HSV_POSTERIZE_BRIGHTNESS_QUALITY HSV_POSTERIZE_STEP_SLOPE
	
	screen.GAMEPLAY_EFFECTS_MENU = HEALTH_EFFECT_ENABLED HEALTH_EFFECT_STRENGTH DAMAGE_EFFECT_ENABLED DAMAGE_EFFECT_STRENGTH
	
	screen.WAVING_MENU = [WAVING_BLOCKS_MENU] [WAVING_WATER_MENU] [UNDERWATER_WAVINESS_MENU]
		
		screen.WAVING_BLOCKS_MENU = WAVING_ENABLED WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_WEATHER_MULT WAVING_NIGHT_MULT HEIGHT_BASED_WAVING_ENABLED
		
		screen.WAVING_WATER_MENU = PHYSICALLY_WAVING_WATER_ENABLED PHYSICALLY_WAVING_WATER_AMOUNT_SURFACE PHYSICALLY_WAVING_WATER_AMOUNT_UNDERGROUND WAVING_WATER_SURFACE_ENABLED WAVING_WATER_SCALE WAVING_WATER_SPEED WAVING_WATER_FRESNEL_MULT WAVING_WATER_NORMAL_AMOUNT WAVING_WATER_SURFACE_AMOUNT_SURFACE WAVING_WATER_SURFACE_AMOUNT_UNDERGROUND
		
		screen.UNDERWATER_WAVINESS_MENU = UNDERWATER_WAVINESS_ENABLED UNDERWATER_WAVINESS_AMOUNT UNDERWATER_WAVINESS_SCALE UNDERWATER_WAVINESS_SPEED
	
	screen.WATER_MENU = [WAVING_WATER_MENU] [UNDERWATER_WAVINESS_MENU] [WATER_COLOR_MENU] WATER_DEPTH_BASED_TRANSPARENCY WATER_TRANSPARENCY_SHALLOW WATER_TRANSPARENCY_DEEP
		
		screen.WATER_COLOR_MENU = WATER_COLOR_RED WATER_COLOR_GREEN WATER_COLOR_BLUE WATER_COLOR_AMOUNT
	
	screen.SKY_MENU = [CLOUDS_MENU] [FOG_MENU] [SKY_COLORS_MENU] SUN_BRIGHTNESS MOON_BRIGHTNESS DARKEN_SKY_UNDERGROUND STARS_BRIGHTNESS sunPathRotation DARKEN_STARS_NEAR_BLOCKLIGHT DARKENED_STARS_BRIGHTNESS WEATHER_TRANSPARENCY WEATHER_HORIZONTAL_AMOUNT
		
		screen.CLOUDS_MENU = [CLOUD_COLORS_MENU] VANILLA_CLOUD_TRANSPARENCY NEARBY_CLOUD_TRANSPARENCY NEARBY_CLOUD_DIST CLOUD_WEATHER_DARKEN REALISTIC_CLOUDS_ENABLED REALISTIC_CLOUD_DENSITY REALISTIC_CLOUD_TRANSPARENCY CLOUDS_QUALITY CLOUD_COVERAGE CLOUD_WEATHER_COVERAGE CLOUD_BOTTOM_Y CLOUD_TOP_Y CLOUD_OPACITY_DISTANCE [CLOUD_NOISES_MENU]
			
			screen.CLOUD_COLORS_MENU = CLOUD_DAY_RED CLOUD_DAY_GREEN CLOUD_DAY_BLUE CLOUD_NIGHT_RED CLOUD_NIGHT_GREEN CLOUD_NIGHT_BLUE CLOUD_SUNRISE_RED CLOUD_SUNRISE_GREEN CLOUD_SUNRISE_BLUE CLOUD_SUNSET_RED CLOUD_SUNSET_GREEN CLOUD_SUNSET_BLUE
			screen.CLOUD_COLORS_MENU.columns = 3
			
			screen.CLOUD_NOISES_MENU = CLOUD_LAYER_1_SCALE CLOUD_LAYER_1_WEIGHT CLOUD_LAYER_1_SPEED CLOUD_LAYER_2_SCALE CLOUD_LAYER_2_WEIGHT CLOUD_LAYER_2_SPEED CLOUD_LAYER_3_SCALE CLOUD_LAYER_3_WEIGHT CLOUD_LAYER_3_SPEED CLOUD_LAYER_4_SCALE CLOUD_LAYER_4_WEIGHT CLOUD_LAYER_4_SPEED
		
		screen.FOG_MENU = BORDER_FOG_ENABLED BORDER_FOG_START BORDER_FOG_END BORDER_FOG_CURVE [IN_LIQUID_FOG_MENU] ATMOSPHERIC_FOG_DENSITY UNDERGROUND_FOG_DENSITY WEATHER_FOG_DENSITY PALE_GARDEN_FOG_DENSITY PALE_GARDEN_FOG_NIGHT_DENSITY NETHER_FOG_DENSITY END_FOG_DENSITY
			
			screen.IN_LIQUID_FOG_MENU = IN_WATER_RED IN_WATER_GREEN IN_WATER_BLUE IN_LAVA_RED IN_LAVA_GREEN IN_LAVA_BLUE IN_SNOW_RED IN_SNOW_GREEN IN_SNOW_BLUE
			screen.IN_LIQUID_FOG_MENU.columns = 3
		
		screen.SKY_COLORS_MENU = SKY_DAY_RED SKY_DAY_GREEN SKY_DAY_BLUE SKY_NIGHT_RED SKY_NIGHT_GREEN SKY_NIGHT_BLUE SKY_HORIZON_DAY_RED SKY_HORIZON_DAY_GREEN SKY_HORIZON_DAY_BLUE SKY_HORIZON_NIGHT_RED SKY_HORIZON_NIGHT_GREEN SKY_HORIZON_NIGHT_BLUE SKY_HORIZON_SUNRISE_RED SKY_HORIZON_SUNRISE_GREEN SKY_HORIZON_SUNRISE_BLUE SKY_HORIZON_SUNSET_RED SKY_HORIZON_SUNSET_GREEN SKY_HORIZON_SUNSET_BLUE
	
	screen.ISOMETRIC_MENU = ISOMETRIC_RENDERING_ENABLED ISOMETRIC_WORLD_SCALE ISOMETRIC_BACKWARD_VISIBILITY ISOMETRIC_FORWARD_VISIBILITY
	
	screen.PERFORMANCE_MENU = SHADOWS_ENABLED shadowMapResolution shadowDistance SHADOW_FILTERING TEMPORAL_FILTER_ENABLED TAA_ENABLED FXAA_ENABLED BLOOM_QUALITY AO_QUALITY REFLECTION_ITERATIONS DEPTH_SUNRAYS_ENABLED VOL_SUNRAYS_ENABLED SUNRAYS_QUALITY MOTION_BLUR_QUALITY SHARPENING_ENABLED WAVING_ENABLED WATER_DEPTH_BASED_TRANSPARENCY REALISTIC_CLOUDS_ENABLED CLOUDS_QUALITY
	
	screen.DEBUG_MENU = [SUPER_SECRET_MENU] NEARBY_PARTICLE_TRANSPARENCY HAND_DEPTH USE_BETTER_RAND SHOW_DANGEROUS_LIGHT USE_SIMPLE_LIGHT REFLECTIVE_EVERYTHING
		
		screen.SUPER_SECRET_MENU = SSS_PIXELS SSS_DECONVERGE SSS_DECONVERGE_AMOUNT SSS_DECONVERGE_QUALITY SSS_FLIP SSS_POSTERIZE SSS_POSTERIZE_QUALITY SSS_NOTCH SSS_NOTCH_QUALITY SSS_BUMPY SSS_SCANLINES SSS_SCANLINES_AMOUNT SSS_SCANLINES_SCALE SSS_PHOSPHOR SSS_PHOSPHOR_AMOUNT SSS_PHOSPHOR_CURVE SSS_INVERT SSS_BARREL SSS_BARREL_AMOUNT
		screen.SUPER_SECRET_MENU.columns = 2



sliders = SIDE_SHADING_BRIGHT SIDE_SHADING_DARK VANILLA_AO_BRIGHT VANILLA_AO_DARK BLOCK_BRIGHTNESS BLOCK_RED BLOCK_GREEN BLOCK_BLUE SKYLIGHT_DAY_BRIGHTNESS SKYLIGHT_DAY_RED SKYLIGHT_DAY_BLUE SKYLIGHT_DAY_GREEN AMBIENT_DAY_BRIGHTNESS AMBIENT_DAY_RED AMBIENT_DAY_BLUE AMBIENT_DAY_GREEN SKYLIGHT_NIGHT_BRIGHTNESS SKYLIGHT_NIGHT_RED SKYLIGHT_NIGHT_BLUE SKYLIGHT_NIGHT_GREEN AMBIENT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_RED AMBIENT_NIGHT_BLUE AMBIENT_NIGHT_GREEN SKYLIGHT_SUNRISE_BRIGHTNESS SKYLIGHT_SUNRISE_RED SKYLIGHT_SUNRISE_BLUE SKYLIGHT_SUNRISE_GREEN AMBIENT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_RED AMBIENT_SUNRISE_BLUE AMBIENT_SUNRISE_GREEN SKYLIGHT_SUNSET_BRIGHTNESS SKYLIGHT_SUNSET_RED SKYLIGHT_SUNSET_BLUE SKYLIGHT_SUNSET_GREEN AMBIENT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_RED AMBIENT_SUNSET_BLUE AMBIENT_SUNSET_GREEN GAMMA BRIGHTNESS SATURATION SATURATION_DARK SATURATION_LIGHT VIBRANCE CONTRAST CONTRAST BLOOM_AMOUNT BLOOM_SIZE BLOOM_QUALITY BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF SHARPEN_AMOUNT SUNRAYS_QUALITY SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_INCREASE_SUNRISE SUNRAYS_INCREASE_SUNSET VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_SCALE WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_WEATHER_MULT WAVING_NIGHT_MULT WEATHER_BRIGHTNESS_MULT HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS AO_AMOUNT AO_SIZE AO_QUALITY SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE BORDER_FOG_CURVE DOF_NEAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_START DOF_FAR_BLUR_SLOPE DOF_FAR_BLUR_STRENGTH DOF_FAR_BLUR_SIZE MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY DOF_FOCAL_PLANE_DISTANCE REFLECTION_ITERATIONS REFLECTION_DITHER_AMOUNT CAVE_AMBIENT_BRIGHTNESS CAVE_AMBIENT_RED CAVE_AMBIENT_GREEN CAVE_AMBIENT_BLUE SHADOW_DISTORT_ADDITION BLOCK_REFLECTION_AMOUNT_SURFACE BLOCK_REFLECTION_AMOUNT_UNDERGROUND WATER_REFLECTION_AMOUNT_SURFACE WATER_REFLECTION_AMOUNT_UNDERGROUND RAIN_REFLECTION_AMOUNT RAIN_REFLECTION_MIN RAIN_REFLECTION_COVERAGE UNDERWATER_WAVINESS_AMOUNT UNDERWATER_WAVINESS_SCALE UNDERWATER_WAVINESS_SPEED RAIN_REFLECTION_SLOPE VANILLA_CLOUD_TRANSPARENCY WEATHER_TRANSPARENCY BORDER_FOG_START BORDER_FOG_END shadowMapResolution shadowDistance SHADOWS_NOISE sunPathRotation STARS_BRIGHTNESS DARKENED_STARS_BRIGHTNESS WATER_TRANSPARENCY_SHALLOW WATER_TRANSPARENCY_DEEP ISOMETRIC_WORLD_SCALE ISOMETRIC_BACKWARD_VISIBILITY ISOMETRIC_FORWARD_VISIBILITY SUN_BRIGHTNESS MOON_BRIGHTNESS SUNRAYS_MIN_SURFACE SUNRAYS_MIN_UNDERGROUND NETHER_BLOCKLIGHT_RED_MULT NETHER_BLOCKLIGHT_GREEN_MULT NETHER_BLOCKLIGHT_BLUE_MULT SSS_NOTCH_QUALITY SSS_DECONVERGE_QUALITY SSS_DECONVERGE_AMOUNT SSS_PHOSPHOR_AMOUNT SSS_PHOSPHOR_CURVE SSS_POSTERIZE_QUALITY SSS_PIXELS SHARPEN_VEL_ADDITION SHARPEN_DEPTH_ADDITION SSS_BARREL_AMOUNT SSS_SCANLINES_AMOUNT SSS_SCANLINES_SCALE AUTO_EXPOSURE_BRIGHT_MULT AUTO_EXPOSURE_DARK_MULT BLOCK_BRIGHTNESS_CURVE PHYSICALLY_WAVING_WATER_AMOUNT_SURFACE WAVING_WATER_SURFACE_AMOUNT_SURFACE PHYSICALLY_WAVING_WATER_AMOUNT_UNDERGROUND WAVING_WATER_SURFACE_AMOUNT_UNDERGROUND BLOCKLIGHT_FLICKERING_AMOUNT SUNRAYS_BRIGHTNESS_INCREASE WEATHER_HORIZONTAL_AMOUNT SUNRAYS_WEATHER_MULT HSV_POSTERIZE_HUE_QUALITY HSV_POSTERIZE_SATURATION_QUALITY HSV_POSTERIZE_BRIGHTNESS_QUALITY HSV_POSTERIZE_STEP_SLOPE BLOCK_BRIGHTNESS_NIGHT_MULT END_AMBIENT_BRIGHTNESS NETHER_AMBIENT_BRIGHTNESS NETHER_BLOCKLIGHT_BRIGHTNESS_MULT SUNRAYS_AMOUNT_MAX_DAY SUNRAYS_AMOUNT_MAX_NIGHT REFLECTION_FRESNEL BLOOM_NETHER_AMOUNT BLOOM_END_AMOUNT WAVING_WATER_NORMAL_AMOUNT WAVING_WATER_FRESNEL_MULT WAVING_WATER_SCALE WAVING_WATER_SPEED WATER_COLOR_RED WATER_COLOR_GREEN WATER_COLOR_BLUE WATER_COLOR_AMOUNT NIGHT_VISION_BRIGHTNESS NIGHT_VISION_GREEN_AMOUNT NEARBY_CLOUD_TRANSPARENCY NEARBY_CLOUD_DIST SKY_DAY_RED SKY_DAY_GREEN SKY_DAY_BLUE SKY_NIGHT_RED SKY_NIGHT_GREEN SKY_NIGHT_BLUE SKY_HORIZON_DAY_RED SKY_HORIZON_DAY_GREEN SKY_HORIZON_DAY_BLUE SKY_HORIZON_NIGHT_RED SKY_HORIZON_NIGHT_GREEN SKY_HORIZON_NIGHT_BLUE SKY_HORIZON_SUNRISE_RED SKY_HORIZON_SUNRISE_GREEN SKY_HORIZON_SUNRISE_BLUE SKY_HORIZON_SUNSET_RED SKY_HORIZON_SUNSET_GREEN SKY_HORIZON_SUNSET_BLUE REALISTIC_CLOUD_DENSITY REALISTIC_CLOUD_TRANSPARENCY CLOUDS_QUALITY CLOUD_COVERAGE CLOUD_WEATHER_COVERAGE CLOUD_WEATHER_DARKEN CLOUD_BOTTOM_Y CLOUD_TOP_Y CLOUD_OPACITY_DISTANCE CLOUD_LAYER_1_SCALE CLOUD_LAYER_1_WEIGHT CLOUD_LAYER_1_SPEED CLOUD_LAYER_2_SCALE CLOUD_LAYER_2_WEIGHT CLOUD_LAYER_2_SPEED CLOUD_LAYER_3_SCALE CLOUD_LAYER_3_WEIGHT CLOUD_LAYER_3_SPEED CLOUD_LAYER_4_SCALE CLOUD_LAYER_4_WEIGHT CLOUD_LAYER_4_SPEED CLOUD_DAY_RED CLOUD_DAY_GREEN CLOUD_DAY_BLUE CLOUD_NIGHT_RED CLOUD_NIGHT_GREEN CLOUD_NIGHT_BLUE CLOUD_SUNRISE_RED CLOUD_SUNRISE_GREEN CLOUD_SUNRISE_BLUE CLOUD_SUNSET_RED CLOUD_SUNSET_GREEN CLOUD_SUNSET_BLUE PIXELATED_SHADOWS ATMOSPHERIC_FOG_DENSITY NETHER_FOG_DENSITY END_FOG_DENSITY WEATHER_FOG_DENSITY PALE_GARDEN_FOG_DENSITY PALE_GARDEN_FOG_NIGHT_DENSITY IN_WATER_RED IN_WATER_GREEN IN_WATER_BLUE IN_LAVA_RED IN_LAVA_GREEN IN_LAVA_BLUE IN_SNOW_RED IN_SNOW_GREEN IN_SNOW_BLUE HEALTH_EFFECT_STRENGTH DAMAGE_EFFECT_STRENGTH NIGHT_SATURATION_DECREASE NEARBY_PARTICLE_TRANSPARENCY HAND_DEPTH BRIGHT_BLOCK_DECREASE TEXTURE_CONTRAST UNDERGROUND_FOG_DENSITY SHADOWS_BRIGHTNESS FOLIAGE_SATURATION SUNLIGHT_CEL_AMOUNT AMBIENT_CEL_AMOUNT BLOCKLIGHT_CEL_AMOUNT



profile.POTATO      =  REFLECTIONS_ENABLED=0  REFLECTION_ITERATIONS=20   WAVING_WATER_SURFACE_ENABLED=0   SHADOWS_ENABLED=0  SHADOW_FILTERING=0  shadowDistance=64.0  shadowMapResolution=256   SSAO_ENABLED=0   AO_QUALITY=2   BLOOM_ENABLED=0  BLOOM_QUALITY=2  DEPTH_SUNRAYS_ENABLED=0   VOL_SUNRAYS_ENABLED=0   SUNRAYS_QUALITY=2   TEMPORAL_FILTER_ENABLED=0  SHARPENING_ENABLED=0  CLOUDS_QUALITY=4    WATER_DEPTH_BASED_TRANSPARENCY=0
profile.VERY_LOW    =  REFLECTIONS_ENABLED=0  REFLECTION_ITERATIONS=25   WAVING_WATER_SURFACE_ENABLED=0   SHADOWS_ENABLED=1  SHADOW_FILTERING=0  shadowDistance=80.0  shadowMapResolution=512   SSAO_ENABLED=0   AO_QUALITY=2   BLOOM_ENABLED=0  BLOOM_QUALITY=2  DEPTH_SUNRAYS_ENABLED=0   VOL_SUNRAYS_ENABLED=0   SUNRAYS_QUALITY=3   TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=6    WATER_DEPTH_BASED_TRANSPARENCY=1
profile.LOW         =  REFLECTIONS_ENABLED=1  REFLECTION_ITERATIONS=30   WAVING_WATER_SURFACE_ENABLED=-1  SHADOWS_ENABLED=1  SHADOW_FILTERING=2  shadowDistance=128.0  shadowMapResolution=768   SSAO_ENABLED=-1  AO_QUALITY=2   BLOOM_ENABLED=1  BLOOM_QUALITY=2  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=4   TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=10   WATER_DEPTH_BASED_TRANSPARENCY=1
profile.MEDIUM      =  REFLECTIONS_ENABLED=1  REFLECTION_ITERATIONS=40   WAVING_WATER_SURFACE_ENABLED=-1  SHADOWS_ENABLED=1  SHADOW_FILTERING=3  shadowDistance=160.0  shadowMapResolution=1280  SSAO_ENABLED=-1  AO_QUALITY=3   BLOOM_ENABLED=1  BLOOM_QUALITY=3  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=6   TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=16   WATER_DEPTH_BASED_TRANSPARENCY=1
profile.HIGH        =  REFLECTIONS_ENABLED=1  REFLECTION_ITERATIONS=65   WAVING_WATER_SURFACE_ENABLED=-1  SHADOWS_ENABLED=1  SHADOW_FILTERING=4  shadowDistance=192.0  shadowMapResolution=2048  SSAO_ENABLED=-1  AO_QUALITY=5   BLOOM_ENABLED=1  BLOOM_QUALITY=4  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=10   TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=32   WATER_DEPTH_BASED_TRANSPARENCY=1
profile.ULTRA       =  REFLECTIONS_ENABLED=1  REFLECTION_ITERATIONS=100  WAVING_WATER_SURFACE_ENABLED=-1  SHADOWS_ENABLED=1  SHADOW_FILTERING=4  shadowDistance=256.0  shadowMapResolution=4096  SSAO_ENABLED=-1  AO_QUALITY=8   BLOOM_ENABLED=1  BLOOM_QUALITY=4  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=16   TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=64   WATER_DEPTH_BASED_TRANSPARENCY=1
profile.UNPLAYABLE  =  REFLECTIONS_ENABLED=1  REFLECTION_ITERATIONS=300  WAVING_WATER_SURFACE_ENABLED=-1  SHADOWS_ENABLED=1  SHADOW_FILTERING=4  shadowDistance=384.0  shadowMapResolution=12288  SSAO_ENABLED=-1  AO_QUALITY=24  BLOOM_ENABLED=1  BLOOM_QUALITY=4  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=32  TEMPORAL_FILTER_ENABLED=1  SHARPENING_ENABLED=1  CLOUDS_QUALITY=128  WATER_DEPTH_BASED_TRANSPARENCY=1










###################################
#        PIPELINE SETTINGS        #
###################################

dynamicHandLight = false
oldLighting = false
vignette = false
separateAo = true
particles.before.deferred=true

alphaTest.gbuffers_hand=GL_ALWAYS
alphaTest.gbuffers_clouds=GREATER 0.0001

dhShadow.enabled=false

#if SHADOWS_ENABLED == 1
	shadowTerrain = true
	shadowTranslucent = true
	shadowEntities = true
	shadowBlockEntities = true
	program.world-1/shadow.enabled = true
	program.world0/shadow.enabled = true
	program.world1/shadow.enabled = true
#else
	shadowTerrain = false
	shadowTranslucent = false
	shadowEntities = false
	shadowBlockEntities = false
	program.world-1/shadow.enabled = false
	program.world0/shadow.enabled = false
	program.world1/shadow.enabled = false
#endif

#if SSS_BARREL == 1
	program.world-1/composite7.enabled = true
	program.world0/composite7.enabled = true
	program.world1/composite7.enabled = true
#else
	program.world-1/composite7.enabled = false
	program.world0/composite7.enabled = false
	program.world1/composite7.enabled = false
#endif

#debug
program.world-1/composite99.enabled = false
program.world0/composite99.enabled = false
program.world1/composite99.enabled = false










########################################
#        PER-FRAME CALCULATIONS        #
########################################



# constants

#if MC_VERSION < 11300
	variable.float.pi = 3.1415926538
#endif



# main

uniform.float.farPlusNear = far + near
uniform.float.farMinusNear = far - near
uniform.float.twoTimesNear = 2.0 * near
uniform.float.twoTimesNearTimesFar = 2.0 * near * far

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.difX = cameraPosition.x - previousCameraPosition.x
variable.float.difY = cameraPosition.y - previousCameraPosition.y
variable.float.difZ = cameraPosition.z - previousCameraPosition.z
variable.float.velocity = sqrt(difX * difX + difY * difY + difZ * difZ) / frameTime
uniform.float.sharpenVelocityFactor = smooth(1, min(velocity, 0.01) * 100.0, 0.05, 0.5)

uniform.float.betterRainStrength = 1.0 - sqrt(1.0 - rainStrength)
uniform.float.rainReflectionStrength = smooth(2, betterRainStrength, 45, 30) * (0.3 + 0.7 * smooth(3, if(in(biome_precipitation, 1), 1, 0), 5, 10))

# raise / lower darkened horizon
variable.float.horizonAltitudeAddend1 = atan(75.0 / (eyeAltitude - 58.0))
# fix output of atan
variable.float.horizonAltitudeAddend2 = horizonAltitudeAddend1 + if(horizonAltitudeAddend1 > 0.0, pi / -2.0, pi / 2.0)
# shrink horizon faster when you're high off the ground
uniform.float.horizonAltitudeAddend = horizonAltitudeAddend2 - (atan(eyeAltitude - 64.0) + pi / 2.0) / 20.0

variable.float.sunriseTime = if(worldTime > 18000, worldTime - 24000, worldTime)

# true if the sun is casting shadows
variable.bool.isDay = sunAngle <= 0.5
# true if looking towards whichever isn't casting shadows
variable.bool.isOtherLightSource = shadowLightPosition.z > 0.0001
# isDay ^^ isOtherLightSource
uniform.bool.isSun = (isDay && !isOtherLightSource) || (!isDay && isOtherLightSource)

uniform.float.inPaleGarden=smooth(4, if(in(biome, BIOME_PALE_GARDEN), 1, 0), 12, 10)

uniform.float.centerLinearDepthSmooth = 2.0 * near / (far + near - centerDepthSmooth * (far - near))

# gameplay effects
#ifdef IS_IRIS
	# `currentPlayerHealth` is -1 in creative / spectator, so this turns -1 into 1
	variable.float.fixedPlayerHealth = if(currentPlayerHealth == -1, 1.0, currentPlayerHealth)
	uniform.float.smoothPlayerHealth = smooth(5, fixedPlayerHealth, 0.3, 1.0)
	uniform.float.damageAmount = clamp((smoothPlayerHealth - fixedPlayerHealth) * 6.0, 0.0, 1.0)
#else
	uniform.float.smoothPlayerHealth = 1.0
	uniform.float.damageAmount = 1.0
#endif



# TAA Jitter, originally taken from Complementary Reimagined
# Link: https://modrinth.com/shader/complementary-reimagined

variable.int.frameMod8 = frameCounter % 8

variable.float.taaOffsetX = if (  \
	frameMod8 == 0,  0.125,       \
	frameMod8 == 1, -0.125,       \
	frameMod8 == 2,  0.625,       \
	frameMod8 == 3,  0.375,       \
	frameMod8 == 4, -0.625,       \
	frameMod8 == 5, -0.875,       \
	frameMod8 == 6,  0.375,       \
	frameMod8 == 7,  0.875,       \
	0.0                           \
)
variable.float.taaOffsetY = if (  \
	frameMod8 == 0, -0.375,       \
	frameMod8 == 1,  0.375,       \
	frameMod8 == 2,  0.125,       \
	frameMod8 == 3, -0.625,       \
	frameMod8 == 4,  0.625,       \
	frameMod8 == 5, -0.125,       \
	frameMod8 == 6, -0.875,       \
	frameMod8 == 7,  0.875,       \
	0.0                           \
)
uniform.vec2.taaOffset = vec2(taaOffsetX / viewWidth * 0.97, taaOffsetY / viewHeight * 0.97)



# light calculations


# shadowcaster brightnesses:
variable.float.sunRiseStart = 0.0
variable.float.sunRiseEnd = 0.05
variable.float.sunSetStart = 0.45
variable.float.sunSetEnd = 0.5
variable.float.moonRiseStart = 0.55
variable.float.moonRiseEnd = 0.65
variable.float.moonSetStart = 0.85
variable.float.moonSetEnd = 0.95

uniform.float.sunLightBrightness = if (                                                                                        \
	sunAngle >= sunRiseStart && sunAngle < sunRiseEnd , pow((sunAngle - sunRiseStart) / (sunRiseEnd - sunRiseStart), 0.85),     \
	sunAngle >= sunRiseEnd   && sunAngle < sunSetStart, 1.0,                                                                   \
	sunAngle >= sunSetStart  && sunAngle < sunSetEnd  , pow(1.0 - (sunAngle - sunSetStart) / (sunSetEnd - sunSetStart), 0.85),  \
	0.0                                                                                                                        \
)
uniform.float.moonLightBrightness = if (                                                                                  \
	sunAngle >= moonRiseStart && sunAngle < moonRiseEnd , (sunAngle - moonRiseStart) / (moonRiseEnd - moonRiseStart),     \
	sunAngle >= moonRiseEnd   && sunAngle < moonSetStart, 1.0,                                                            \
	sunAngle >= moonSetStart  && sunAngle < moonSetEnd  , 1.0 - (sunAngle - moonSetStart) / (moonSetEnd - moonSetStart),  \
	0.0                                                                                                                   \
)


# mixing the sunlight color: (moonlight color is flat)
variable.float.sunriseColorEnd = 0.1
variable.float.sunsetColorStart = 0.4

uniform.float.sunriseColorPercent = if (                                                                                         \
	sunAngle >= sunRiseStart && sunAngle < sunriseColorEnd, 1.0 - (sunAngle - sunRiseStart) / (sunriseColorEnd - sunRiseStart),  \
	0.0                                                                                                                          \
)
uniform.float.sunsetColorPercent = if (                                                                                    \
	sunAngle >= sunsetColorStart && sunAngle < sunSetEnd, (sunAngle - sunsetColorStart) / (sunSetEnd - sunsetColorStart),  \
	0.0                                                                                                                    \
)
uniform.float.sunNoonColorPercent = 1.0 - (sunriseColorPercent + sunsetColorPercent)


# mixing ambientlight color:
variable.float.ambientSunriseStart = 0.94
#ambientSunriseSwitch is always 0.0 and 1.0
variable.float.ambientSunriseEnd = 0.1
variable.float.ambientSunsetStart = 0.4
#ambientSunsetSwitch is always 0.5
variable.float.ambientSunsetEnd = 0.56

uniform.float.ambientSunPercent = if (                                                                                                    \
	sunAngle >= 0.0                && sunAngle < ambientSunriseEnd , (sunAngle - 0.0) / (ambientSunriseEnd - 0.0),                        \
	sunAngle >= ambientSunriseEnd  && sunAngle < ambientSunsetStart, 1.0,                                                                 \
	sunAngle >= ambientSunsetStart && sunAngle < 0.5               , 1.0 - (sunAngle - ambientSunsetStart) / (0.5 - ambientSunsetStart),  \
	0.0                                                                                                                                   \
)
variable.float.rawAmbientMoonPercent = if (                                                                                                             \
	sunAngle >= 0.5                 && sunAngle < ambientSunsetEnd   , pow((sunAngle - 0.5) / (ambientSunsetEnd - 0.5), 2),                             \
	sunAngle >= ambientSunsetEnd    && sunAngle < ambientSunriseStart, 1.0,                                                                             \
	sunAngle >= ambientSunriseStart && sunAngle < 1.0                , pow(1.0 - (sunAngle - ambientSunriseStart) / (1.0 - ambientSunriseStart), 2),    \
	0.0                                                                                                                                                 \
)
uniform.float.ambientMoonPercent = 1.0 - (1.0 - rawAmbientMoonPercent) * (1.0 - rawAmbientMoonPercent) * (1.0 - rawAmbientMoonPercent)
uniform.float.ambientSunrisePercent = if (                                        \
	sunAngle >= ambientSunriseStart && sunAngle < 1.0, 1.0 - ambientMoonPercent,  \
	sunAngle >= 0.0 && sunAngle < ambientSunriseEnd  , 1.0 - ambientSunPercent,   \
	0.0                                                                           \
)
uniform.float.ambientSunsetPercent = if (                                         \
	sunAngle >= ambientSunsetStart && sunAngle < 0.5, 1.0 - ambientSunPercent,    \
	sunAngle >= 0.5 && sunAngle < ambientSunsetEnd  , 1.0 - ambientMoonPercent,   \
	0.0                                                                           \
)

uniform.float.dayPercent = ambientSunPercent + (ambientSunrisePercent + ambientSunsetPercent) * 0.8





# blocklight flickering

variable.float.blockFlickerTime = frameTimeCounter * 4
variable.int.blockFlickerIndex = floor(blockFlickerTime)
variable.int.blockFlickerMod9 = blockFlickerIndex % 9
variable.int.blockFlickerMod11 = blockFlickerIndex % 11
variable.int.blockFlickerMod13 = blockFlickerIndex % 13
variable.float.blockFlickerInterpValue = blockFlickerTime % 1.0

# use three arrays (lengths 9, 11, and 13) to have a pattern that only repeats every 1287th value (ifs can only have 16 branches + else?????)
variable.float.blockFlicker9A = if (  \
	blockFlickerMod9 == 0,  0.583,    \
	blockFlickerMod9 == 1,  0.853,    \
	blockFlickerMod9 == 2,  0.337,    \
	blockFlickerMod9 == 3,  0.361,    \
	blockFlickerMod9 == 4,  0.07 ,    \
	blockFlickerMod9 == 5,  0.719,    \
	blockFlickerMod9 == 6,  0.038,    \
	blockFlickerMod9 == 7,  0.279,    \
	blockFlickerMod9 == 8,  0.599,    \
	0.0  \
)
variable.float.blockFlicker9B = if (  \
	blockFlickerMod9 == 0,  0.853,    \
	blockFlickerMod9 == 1,  0.337,    \
	blockFlickerMod9 == 2,  0.361,    \
	blockFlickerMod9 == 3,  0.07 ,    \
	blockFlickerMod9 == 4,  0.719,    \
	blockFlickerMod9 == 5,  0.038,    \
	blockFlickerMod9 == 6,  0.279,    \
	blockFlickerMod9 == 7,  0.599,    \
	blockFlickerMod9 == 8,  0.583,    \
	0.0  \
)
variable.float.blockFlicker9C = if (  \
	blockFlickerMod9 == 0,  0.337,    \
	blockFlickerMod9 == 1,  0.361,    \
	blockFlickerMod9 == 2,  0.07 ,    \
	blockFlickerMod9 == 3,  0.719,    \
	blockFlickerMod9 == 4,  0.038,    \
	blockFlickerMod9 == 5,  0.279,    \
	blockFlickerMod9 == 6,  0.599,    \
	blockFlickerMod9 == 7,  0.583,    \
	blockFlickerMod9 == 8,  0.853,    \
	0.0  \
)
variable.float.blockFlicker9D = if (  \
	blockFlickerMod9 == 0,  0.361,    \
	blockFlickerMod9 == 1,  0.07 ,    \
	blockFlickerMod9 == 2,  0.719,    \
	blockFlickerMod9 == 3,  0.038,    \
	blockFlickerMod9 == 4,  0.279,    \
	blockFlickerMod9 == 5,  0.599,    \
	blockFlickerMod9 == 6,  0.583,    \
	blockFlickerMod9 == 7,  0.853,    \
	blockFlickerMod9 == 8,  0.337,    \
	0.0  \
)

variable.float.blockFlicker11A = if (  \
	blockFlickerMod11 == 0,  0.273,    \
	blockFlickerMod11 == 1,  0.673,    \
	blockFlickerMod11 == 2,  0.248,    \
	blockFlickerMod11 == 3,  0.791,    \
	blockFlickerMod11 == 4,  0.229,    \
	blockFlickerMod11 == 5,  0.399,    \
	blockFlickerMod11 == 6,  0.124,    \
	blockFlickerMod11 == 7,  0.478,    \
	blockFlickerMod11 == 8,  0.175,    \
	blockFlickerMod11 == 9,  0.822,    \
	blockFlickerMod11 == 10, 0.192,    \
	0.0  \
)
variable.float.blockFlicker11B = if (  \
	blockFlickerMod11 == 0,  0.673,    \
	blockFlickerMod11 == 1,  0.248,    \
	blockFlickerMod11 == 2,  0.791,    \
	blockFlickerMod11 == 3,  0.229,    \
	blockFlickerMod11 == 4,  0.399,    \
	blockFlickerMod11 == 5,  0.124,    \
	blockFlickerMod11 == 6,  0.478,    \
	blockFlickerMod11 == 7,  0.175,    \
	blockFlickerMod11 == 8,  0.822,    \
	blockFlickerMod11 == 9,  0.192,    \
	blockFlickerMod11 == 10, 0.273,    \
	0.0  \
)
variable.float.blockFlicker11C = if (  \
	blockFlickerMod11 == 0,  0.248,    \
	blockFlickerMod11 == 1,  0.791,    \
	blockFlickerMod11 == 2,  0.229,    \
	blockFlickerMod11 == 3,  0.399,    \
	blockFlickerMod11 == 4,  0.124,    \
	blockFlickerMod11 == 5,  0.478,    \
	blockFlickerMod11 == 6,  0.175,    \
	blockFlickerMod11 == 7,  0.822,    \
	blockFlickerMod11 == 8,  0.192,    \
	blockFlickerMod11 == 9,  0.273,    \
	blockFlickerMod11 == 10, 0.673,    \
	0.0  \
)
variable.float.blockFlicker11D = if (  \
	blockFlickerMod11 == 0,  0.791,    \
	blockFlickerMod11 == 1,  0.229,    \
	blockFlickerMod11 == 2,  0.399,    \
	blockFlickerMod11 == 3,  0.124,    \
	blockFlickerMod11 == 4,  0.478,    \
	blockFlickerMod11 == 5,  0.175,    \
	blockFlickerMod11 == 6,  0.822,    \
	blockFlickerMod11 == 7,  0.192,    \
	blockFlickerMod11 == 8,  0.273,    \
	blockFlickerMod11 == 9,  0.673,    \
	blockFlickerMod11 == 10, 0.248,    \
	0.0  \
)

variable.float.blockFlicker13A = if (  \
	blockFlickerMod13 == 0,  0.799,    \
	blockFlickerMod13 == 1,  0.411,    \
	blockFlickerMod13 == 2,  0.471,    \
	blockFlickerMod13 == 3,  0.909,    \
	blockFlickerMod13 == 4,  0.981,    \
	blockFlickerMod13 == 5,  0.170,    \
	blockFlickerMod13 == 6,  0.773,    \
	blockFlickerMod13 == 7,  0.558,    \
	blockFlickerMod13 == 8,  0.615,    \
	blockFlickerMod13 == 9,  0.242,    \
	blockFlickerMod13 == 10, 0.502,    \
	blockFlickerMod13 == 11, 0.269,    \
	blockFlickerMod13 == 12, 0.101,    \
	0.0  \
)
variable.float.blockFlicker13B = if (  \
	blockFlickerMod13 == 0,  0.411,    \
	blockFlickerMod13 == 1,  0.471,    \
	blockFlickerMod13 == 2,  0.909,    \
	blockFlickerMod13 == 3,  0.981,    \
	blockFlickerMod13 == 4,  0.170,    \
	blockFlickerMod13 == 5,  0.773,    \
	blockFlickerMod13 == 6,  0.558,    \
	blockFlickerMod13 == 7,  0.615,    \
	blockFlickerMod13 == 8,  0.242,    \
	blockFlickerMod13 == 9,  0.502,    \
	blockFlickerMod13 == 10, 0.269,    \
	blockFlickerMod13 == 11, 0.101,    \
	blockFlickerMod13 == 12, 0.799,    \
	0.0  \
)
variable.float.blockFlicker13C = if (  \
	blockFlickerMod13 == 0,  0.471,    \
	blockFlickerMod13 == 1,  0.909,    \
	blockFlickerMod13 == 2,  0.981,    \
	blockFlickerMod13 == 3,  0.170,    \
	blockFlickerMod13 == 4,  0.773,    \
	blockFlickerMod13 == 5,  0.558,    \
	blockFlickerMod13 == 6,  0.615,    \
	blockFlickerMod13 == 7,  0.242,    \
	blockFlickerMod13 == 8,  0.502,    \
	blockFlickerMod13 == 9,  0.269,    \
	blockFlickerMod13 == 10, 0.101,    \
	blockFlickerMod13 == 11, 0.799,    \
	blockFlickerMod13 == 12, 0.411,    \
	0.0  \
)
variable.float.blockFlicker13D = if (  \
	blockFlickerMod13 == 0,  0.909,    \
	blockFlickerMod13 == 1,  0.981,    \
	blockFlickerMod13 == 2,  0.170,    \
	blockFlickerMod13 == 3,  0.773,    \
	blockFlickerMod13 == 4,  0.558,    \
	blockFlickerMod13 == 5,  0.615,    \
	blockFlickerMod13 == 6,  0.242,    \
	blockFlickerMod13 == 7,  0.502,    \
	blockFlickerMod13 == 8,  0.269,    \
	blockFlickerMod13 == 9,  0.101,    \
	blockFlickerMod13 == 10, 0.799,    \
	blockFlickerMod13 == 11, 0.411,    \
	blockFlickerMod13 == 12, 0.471,    \
	0.0  \
)

variable.float.blockFlickerValue1 = (blockFlicker9A + blockFlicker11A + blockFlicker13A) / 3
variable.float.blockFlickerValue2 = (blockFlicker9B + blockFlicker11B + blockFlicker13B) / 3
variable.float.blockFlickerValue3 = (blockFlicker9C + blockFlicker11C + blockFlicker13C) / 3
variable.float.blockFlickerValue4 = (blockFlicker9D + blockFlicker11D + blockFlicker13D) / 3

# cubic interpolate 
variable.float.blockFlickerA0 = blockFlickerValue4 - blockFlickerValue3 - blockFlickerValue1 + blockFlickerValue2
variable.float.blockFlickerA1 = blockFlickerValue1 - blockFlickerValue2 - blockFlickerA0
variable.float.blockFlickerA2 = blockFlickerValue3 - blockFlickerValue1
variable.float.blockFlickerA3 = blockFlickerValue2
variable.float.blockFlickerInterpValue3 = blockFlickerInterpValue * blockFlickerInterpValue * blockFlickerInterpValue
variable.float.blockFlickerInterpValue2 = blockFlickerInterpValue * blockFlickerInterpValue
variable.float.rawBlockFlickerAmount = blockFlickerA0 * blockFlickerInterpValue3 + blockFlickerA1 * blockFlickerInterpValue2 + blockFlickerA2 * blockFlickerInterpValue + blockFlickerA3
uniform.float.blockFlickerAmount = pow(rawBlockFlickerAmount, 0.1) * 0.5 + 1.0 - 0.5





# inverses

uniform.float.invAspectRatio = 1.0 / aspectRatio
uniform.float.invFar = 1.0 / far
uniform.vec2.invViewSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)
uniform.vec2.invPixelSize = vec2(viewWidth, viewHeight)
uniform.float.invFrameTime = 1.0 / frameTime
uniform.float.invFarMinusNear = 1.0 / farMinusNear
